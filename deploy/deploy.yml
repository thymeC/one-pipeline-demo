---
- name: Deploy FastAPI Application to Production using Docker
  hosts: webservers
  become: yes
  vars:
    app_name: "one-pipeline-demo"
    app_port: 8000
    docker_image: "{{ docker_image | default('jinggegeha/one-pipeline-demo') }}"
    docker_tag: "{{ docker_tag | default(build_number) | default('latest') }}"
    deployment_time: "{{ deployment_time | default('unknown') }}"

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - curl
          - nginx
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Check if Docker is installed
      stat:
        path: /usr/bin/docker
      register: docker_binary

    - name: Debug Docker check result
      debug:
        msg: "Docker binary exists: {{ docker_binary.stat.exists }}"

    - name: Debug Docker image info
      debug:
        msg: "Pulling image: {{ docker_image }}:{{ docker_tag }}"
        msg: "All variables: docker_image={{ docker_image }}, docker_tag={{ docker_tag }}, build_number={{ build_number }}"

    - name: Validate Docker tag
      fail:
        msg: "Docker tag is empty or invalid: '{{ docker_tag }}'. Please check GitHub Actions workflow."
      when: docker_tag is not defined or docker_tag == "" or docker_tag == "None"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: not docker_binary.stat.exists

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: not docker_binary.stat.exists

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: not docker_binary.stat.exists

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      when: not docker_binary.stat.exists

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Stop and remove existing container
      docker_container:
        name: "{{ app_name }}"
        state: absent
      ignore_errors: yes

    - name: Remove old Docker images
      docker_image:
        name: "{{ docker_image }}"
        state: absent
      ignore_errors: yes

    - name: Pull Docker image from Docker Hub
      docker_image:
        name: "{{ docker_image }}:{{ docker_tag | default('latest') }}"
        source: pull
        force_source: yes

    - name: Create Docker network
      docker_network:
        name: "{{ app_name }}-network"
        state: present

    - name: Create Docker container
      docker_container:
        name: "{{ app_name }}"
        image: "{{ docker_image }}:{{ docker_tag | default('latest') }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ app_port }}:8000"
        env:
          ENVIRONMENT: "production"
          DEPLOYMENT_TIME: "{{ deployment_time }}"
          BUILD_NUMBER: "{{ docker_tag | default('latest') }}"
        networks:
          - name: "{{ app_name }}-network"

    - name: Create Nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
        mode: '0644'
      notify: reload nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link
      notify: reload nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx

    - name: Wait for application to start
      wait_for:
        port: "{{ app_port }}"
        delay: 10
        timeout: 60

    - name: Health check
      uri:
        url: "http://localhost:{{ app_port }}/health"
        method: GET
        status_code: 200
      retries: 3
      delay: 10

    - name: Clean up unused Docker images
      docker_prune:
        images: yes
        images_filters:
          dangling: false

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded